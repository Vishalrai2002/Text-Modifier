{"version":3,"sources":["logo.svg","components/Navbar.js","components/TextForm.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","mode","href","title","type","id","onClick","toggleMode","role","htmlfor","TextForm","useState","text","settext","style","color","heading","value","onChange","event","console","log","target","backgroundColor","rows","newText","toUpperCase","showAlert","toLowerCase","msg","SpeechSynthesisUtterance","window","speechSynthesis","speak","document","getElementById","select","navigator","clipboard","writeText","split","join","length","Alert","height","alert","word","lower","charAt","slice","capitalize","App","setMode","setAlert","message","setTimeout","abouttext","body","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","render","StrictMode"],"mappings":"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","file":"static/js/main.692e8bdb.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\n\r\n\r\nexport default function Navbar(props) {\r\n  return (\r\n   <>\r\n    <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n  <div className=\"container-fluid\">\r\n    <a className=\"navbar-brand\" href=\"#\">{props.title}</a>\r\n    {/* <Link className=\"navbar-brand\" to=\"/\">{props.title}</Link> */}\r\n    <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n      <span className=\"navbar-toggler-icon\"></span>\r\n    </button>\r\n    <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n      <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n        <li className=\"nav-item\">\r\n          <a className=\"nav-link active\" aria-current=\"page\" href=\"#\">Home</a>\r\n          {/* <Link className=\"nav-link active\" aria-current=\"page\" to=\"/\">Home</Link> */}\r\n        </li>\r\n        {/* <li className=\"nav-item\">\r\n          <a className=\"nav-link\" href=\"/about\">{props.abouttext}</a>\r\n          <Link className=\"nav-link\" to=\"/about\">{props.abouttext}</Link>\r\n        </li> */}\r\n      </ul>\r\n    \r\n      <div className={`form-check form-switch text-${props.mode==='light'?'dark':'light'}`}>\r\n          <input className=\"form-check-input\" onClick={props.toggleMode} type=\"checkbox\" role=\"switch\" id=\"flexSwitchCheckDefault\"/>\r\n          <label className=\"form-check-label\" htmlfor=\"flexSwitchCheckDefault\">Enable Dark Mode</label>\r\n      </div>\r\n     \r\n    </div>\r\n  </div>\r\n</nav>\r\n   </>\r\n  )\r\n}\r\n","import React, {useState} from 'react'\r\n\r\n\r\nexport default function TextForm(props) {\r\n\r\n  const  handleUpClick=()=>{\r\n        console.log(\"Upper Case Clicked\" +text);\r\n        let newText=text.toUpperCase();\r\n        settext(newText);\r\n        props.showAlert(\"successfully converted to UpperCase!\",\"success\");\r\n    }\r\n\r\n    const handleLoClick=()=>{\r\n        console.log(\"Lower Case Clicked\"+text);\r\n        let newText=text.toLowerCase();\r\n        settext(newText);\r\n        props.showAlert(\"successfully converted to LowerCase!\",\"success\");\r\n\r\n    }\r\n\r\n    const handleOnClear=()=>{\r\n        let newText='';\r\n        settext(newText);\r\n        props.showAlert(\"Cleared successfully!\",\"success\")\r\n    }\r\n    \r\n    const speak = () => {\r\n    let msg = new SpeechSynthesisUtterance();\r\n    msg.text = text;\r\n    window.speechSynthesis.speak(msg);\r\n    }\r\n\r\n    const handleOnChange=(event)=>{\r\n        console.log(\"on changed\");\r\n        settext(event.target.value);\r\n    }\r\n\r\n    const handleCopy=()=>{\r\n        var text=document.getElementById(\"my-Box\");\r\n        text.select();\r\n        navigator.clipboard.writeText(text.value);\r\n        props.showAlert(\"Text Copied\",\"success\")\r\n    }\r\n\r\n    const handleExtraSpaces=()=>{\r\n        let newText=text.split(/[ ]+/);\r\n        settext(newText.join(\" \"));\r\n    }\r\n\r\n\r\n    const[text,settext]=useState(\"\");\r\n\r\n    return (\r\n        <>\r\n    <div className=\"container\" style={{color:props.mode==='dark'?'white':'black'}}>\r\n        <h1>{props.heading}</h1>\r\n    <div className=\"mb-3\">\r\n        <textarea className=\"form-control\" value={text} onChange={handleOnChange} style={{backgroundColor:props.mode==='dark'?'#042743':'white',color:props.mode==='dark'?'white':'black'}}  id=\"my-Box\" rows=\"8\"></textarea>\r\n    </div>\r\n    <button className=\"btn btn-primary mx-1\" onClick={handleUpClick}>Covert To Uppercase</button>\r\n    <button className=\"btn btn-primary mx-1\" onClick={handleLoClick}>Covert To Lowercase</button>\r\n    <button className=\"btn btn-primary mx-1\" onClick={speak}>Listen Your Text</button>\r\n    <button className=\"btn btn-primary mx-1\" onClick={handleCopy}>Copy Text</button>\r\n    <button className=\"btn btn-primary mx-1\" onClick={handleExtraSpaces}>Remove Extra Spaces</button>\r\n    <button className=\"btn btn-danger mx-1\" onClick={handleOnClear}>CLear Text</button>\r\n\r\n\r\n    </div>\r\n    <div className=\"conatiner\" my-3 style={{color:props.mode==='dark'?'white':'black'}}>\r\n        <h2>Your text Summary</h2>\r\n        <p>{text.split(\" \").length} words and {text.length} characters</p>\r\n        <p>{0.008*text.split(\"\").length} minutes to read</p>\r\n    <h2>Preview</h2>\r\n    <p>{text.length>0?text:\"Enter something in the Text-Box to Preview it here!\"}</p>\r\n    </div>\r\n    </>\r\n  )\r\n}\r\n","import React from 'react'\r\n\r\nfunction Alert(props) {\r\n    const capitalize = (word)=>{\r\n        const lower = word.toLowerCase();\r\n        return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n    }\r\n    return (\r\n        <div style={{height: '50px'}}>\r\n        {props.alert && <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n           <strong>{capitalize(props.alert.type)}</strong>: {props.alert.msg} \r\n        </div>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Alert","import logo from './logo.svg';\nimport './App.css';\nimport Navbar from './components/Navbar';\nimport TextForm from './components/TextForm';\nimport React,{useState} from 'react'\nimport Alert from './components/Alert';\n// import About from './components/About';\n// import {\n//   BrowserRouter,\n//   Routes,\n//   Route,\n// } from \"react-router-dom\";\n\n\n\n// let name=\"Vishal\";\n\n\nfunction App() {\n  const [mode, setMode] = useState('light'); // whether dark-mode is enabled or not\n  const [alert, setAlert] = useState(null); // for setting the alert \n\n\n  const showAlert = (message, type)=>{\n      setAlert({\n        msg: message,\n        type: type\n      })\n      setTimeout(() => {\n          setAlert(null);\n      }, 1500);\n  }\n\n  const toggleMode=()=>{\n    if(mode==='light'){\n      setMode('dark');\n      document.body.style.backgroundColor='#042743';\n      showAlert(\" Dark Mode has been Enabled\",\"success\")\n    }\n    else{\n      setMode('light');\n      document.body.style.backgroundColor='white';\n      showAlert(\" Light Mode has been Enabled\",\"success\")\n    }\n  }\n\n  return (\n  <>\n\n  {/* <BrowserRouter> */}\n        <Navbar title=\"Text-Modifier\"abouttext=\"About\"  mode={mode} toggleMode={toggleMode}/>\n        <Alert alert={alert} />\n        <div className=\"container my-3\">\n        {/* <Routes>\n                <Route exact path='/about' element={<About/>} />\n                <Route exact path='/' element={<TextForm showAlert = {showAlert} heading = \"Enter the text to analyze\" mode = {mode}/>} />\n        </Routes> */}\n\n        <TextForm showAlert={showAlert} heading =\"Enter the text to analyze below\" mode={mode}/>  {/* this line is added by me to remove route  */}\n        </div>\n  {/* </BrowserRouter> */}\n\n  </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}